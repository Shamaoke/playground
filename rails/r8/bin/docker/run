#! /usr/bin/env zsh

##
## ::: Docker startup script :::
##

autoload throw
autoload catch

declare repository=$(basename $PWD)

declare -a args=($@)
declare -a targets=(nginx rails)
declare -a docker_options=( )

##
## ::: Colors :::
##

function r red;     print "\x1b\x5b\x33\x31\x6d$1\x1b\x5b\x30\x6d"
function g green;   print "\x1b\x5b\x33\x32\x6d$1\x1b\x5b\x30\x6d"
function y yellow;  print "\x1b\x5b\x33\x33\x6d$1\x1b\x5b\x30\x6d"
function b blue;    print "\x1b\x5b\x33\x34\x6d$1\x1b\x5b\x30\x6d"
function m magenta; print "\x1b\x5b\x33\x35\x6d$1\x1b\x5b\x30\x6d"
function c cyan;    print "\x1b\x5b\x33\x36\x6d$1\x1b\x5b\x30\x6d"

function rr bright_red;     print "\x1b\x5b\x39\x31\x6d$1\x1b\x5b\x30\x6d"
function gg bright_green;   print "\x1b\x5b\x39\x32\x6d$1\x1b\x5b\x30\x6d"
function yy bright_yellow;  print "\x1b\x5b\x39\x33\x6d$1\x1b\x5b\x30\x6d"
function bb bright_blue;    print "\x1b\x5b\x39\x34\x6d$1\x1b\x5b\x30\x6d"
function mm bright_magenta; print "\x1b\x5b\x39\x35\x6d$1\x1b\x5b\x30\x6d"
function cc bright_cyan;    print "\x1b\x5b\x39\x36\x6d$1\x1b\x5b\x30\x6d"

function bls slowly_blinking; print "\x1b\x5b\x35\x6d$1\x1b\x5b\x30\x6d"

##
## ::: Colors | Legend :::
##
## \x1b\x5b ... \x6d -- SGR — Select Graphic Rendition presentation control function
##
## \x1b\x5b -- CSI — Control Sequence Introducer introducer control function
## \x6d     -- SGR final byte
##
## \x33     -- italicized
## \x34     -- singly underlined
## \x35     -- slowly blinking
## \x37     -- negative image
## \x39     -- crossed-out
## \x32\x31 -- doubly underlined
##
## \x33\x3{0-7}     -- foreground color (`\x33\x31` — red foreground)
## \x39\x3{0-7}     -- bright foreground color (`\x39\x31` — bright red foreground)
## \x34\x3{0-7}     -- background color (`\x34\x32` — green background)
## \x31\x30\x3{0-7} -- bright background color (`\x31\x30\x32` — bright green background)
##
## \x3b -- command separator (`\x33 \x3b \x33\x31 \x3b \x34\x32` — italic ; red foreground ; green background)
## \x30 -- reset
##
## ::: Color | Details :::
##
## • [ECMA-48: 8.3.117 SGR — Select Graphic Rendition, p. 61](https://www.ecma-international.org/publications-and-standards/standards/ecma-48)
##
## • [ANSI escape code - Wikipedia](https://en.wikipedia.org/wiki/ANSI_escape_code)
##
## • [terminal - List of ANSI color escape sequences - Stack Overflow](https://stackoverflow.com/questions/4842424/list-of-ansi-color-escape-sequences)
##

##
## ::: Utilities :::
##

##
## any $element ($array) -> { true /* element IS present in the array */ | false /* overwise */ }
##

#[[maybe_unused]]
function any; [[ ${${@:2}[(i)$1]} -le ${#@:2} ]]

##
## none $element ($array) -> { true /* element is NOT present in the array */ | false /* otherwise */ }
##
function none; [[ ${${@:2}[(i)$1]} -gt ${#@:2} ]]

function usage {
  echo \
    'Usage:' \
    "\n" \
    "\n" \
    'COMMAND' \
    "\n" \
    "run [OPTIONS]" \
    "\n" \
    "\n" \
    'OPTIONS' \
    "\n" \
    '-r|--repository|--repository= -- specify a repository (`r8` is the default)' \
    "\n" \
    '-t|--tag|--tag= -- specify a tag (`latest` is the default)' \
    "\n" \
    '-g|--target -- specify a target { nginx | rails }' \
    "\n" \
    '-n|--network -- specify a network' \
    "\n" \
    '-h|--help -- display this message'
}

# function failwith {
#
#   setopt ERR_EXIT
#
#   local code=$1
#   local message
#
#   case $code {
#     (102) message="$(bls $(r ERROR)): no network was specified!\n" ;;
#   }
#
#   echo $message
#   usage
#   bye $code
# }

##
## ::: Entrypoint :::
##

function main TRAPEXIT {

  local -a options=($args)

  local is_help_needed=${${options[(r)-h|--help]:+true}:-false}

  [[ $is_help_needed == true ]] && usage && bye 1

  # local repository=${options[options[(i)-r|--repository] + 1]:-${${options[(r)--repository=*]#--repository=}:-$repository}}
  local tag=${options[options[(i)-t|--tag] + 1]:-${${options[(r)--tag=*]#--tag=}:-latest}}
  local target=${options[options[(i)-g|--target] + 1]:-${${options[(r)--target=*]#--target=}:-all}}
  local network=${options[options[(i)-n|--network] + 1]:-${${options[(r)--network=*]#--network=}:-$repository}}

  local -A storage=(
    [source]="${HOME}/.workspace/playground/rails/${repository}/storage/production.sqlite3"
    [destination]="/home/${repository}/app/storage/production.sqlite3"
  )

  local -A log=(
    [source]="${HOME}/.workspace/playground/rails/${repository}/log/production.log"
    [destination]="/home/${repository}/app/log/production.log"
  )

  ##
  ## ::: Rails :::
  ##
  local -a rails_docker_options=(
    --detach
    --rm
    --network $network
    --mount "type=bind,source=${storage[source]},destination=${storage[destination]}"
    --mount "type=bind,source=${log[source]},destination=${log[destination]}"
    --ip 10.0.43.151
  )

  ##
  ## ::: Nginx :::
  ##
  local -a nginx_docker_options=(
    --detach
    --rm
    --network $network
    --ip 10.0.43.141
    --publish 80:80
  )

  case $target {
    ('nginx')
      docker_options=($nginx_docker_options)
      docker run $docker_options "${repository}-nginx:$tag"
      docker_options=( )
    ;;

    ('rails')
      docker_options=($rails_docker_options)
      docker run $docker_options "${repository}-rails:$tag"
      docker_options=( )
    ;;

    ('all')
      docker_options=($nginx_docker_options)
      docker run $docker_options "${repository}-nginx:$tag"
      docker_options=( )

      docker_options=($rails_docker_options)
      docker run $docker_options "${repository}-rails:$tag"
      docker_options=( )
    ;;
  }
}

