# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

require 'cucumber/rails'

class Selenium::WebDriver::SeleniumManager
  def self.binary_paths(*arguments) = {
    'code' => 0,
    'message' => '',
    'driver_path' => '/usr/bin/geckodriver',
    'browser_path' => '/usr/bin/firefox'
  }
end

#
# Ruby logger has 5 logger levels: :debug, :info, :warn, :error, :fatal. The default is :info.
# Details: [Logging Selenium commands | Selenium][*]
# [*]: https://www.selenium.dev/documentation/webdriver/troubleshooting/logging
#
Selenium::WebDriver.logger.level = :fatal

# class << self
#   alias_method :step, :register_rb_step_definition
#   alias_method :define, :register_rb_step_definition
# end

singleton_class.alias_method :define, :register_rb_step_definition
#
# Details:
# --------
# • [Class: Object — Documentation for core (3.0.2)](https://www.rubydoc.info/stdlib/core/Object#singleton_class-instance_method)
#
# • [ruby - Is there an alias_method for a class method? - Stack Overflow](https://stackoverflow.com/questions/61330429/is-there-an-alias-method-for-a-class-method)
#

# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how
# your application behaves in the production environment, where an error page will
# be rendered instead.
#
# Sometimes we want to override this default behaviour and allow Rails to rescue
# exceptions and display an error page (just like when the app is running in production).
# Typical scenarios where you want to do this is when you test your error pages.
# There are two ways to allow Rails to rescue exceptions:
#
# 1) Tag your scenario (or feature) with @allow-rescue
#
# 2) Set the value below to true. Beware that doing this globally is not
# recommended as it will mask a lot of errors for you!
#
ActionController::Base.allow_rescue = false

# Capybara.default_driver = :rack_test # :selenium :selenium_headless :selenium_chrome :selenium_chrome_headless
# Capybara.default_driver = :rack_test

Capybara.configure do |config|
  # :rack_test (default), :selenium, :selenium_headless, :selenium_chrome, :selenium_chrome_headless
  config.default_driver = :rack_test
  config.server = :puma, { Silent: true }
end

# Remove/comment out the lines below if your app doesn't have a database.
# For some databases (like MongoDB and CouchDB) you may need to use :truncation instead.
begin
  DatabaseCleaner.strategy = :transaction
  # DatabaseCleaner.strategy = :truncation
rescue NameError
  raise "You need to add database_cleaner to your Gemfile (in the :test group) if you wish to use it."
end

# You may also want to configure DatabaseCleaner to use different strategies for certain features and scenarios.
# See the DatabaseCleaner documentation for details. Example:
#
#   Before('@no-txn,@selenium,@culerity,@celerity,@javascript') do
#     # { except: [:widgets] } may not do what you expect here
#     # as Cucumber::Rails::Database.javascript_strategy overrides
#     # this setting.
#     DatabaseCleaner.strategy = :truncation
#   end
#
#   Before('not @no-txn', 'not @selenium', 'not @culerity', 'not @celerity', 'not @javascript') do
#     DatabaseCleaner.strategy = :transaction
#   end
#

# Possible values are :truncation and :transaction
# The :transaction strategy is faster, but might give you threading problems.
# See https://github.com/cucumber/cucumber-rails/blob/master/features/choose_javascript_database_strategy.feature
Cucumber::Rails::Database.javascript_strategy = :truncation
# Cucumber::Rails::Database.javascript_strategy = :transaction
