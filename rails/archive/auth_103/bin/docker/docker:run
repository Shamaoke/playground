#! /usr/bin/env zsh

##
## ::: Docker startup script :::
##

##
## Typical usage
## -------------
## `bin/docker/run -r otvsp.ru:5000/otvsp/auth_103-nginx -g nginx`
##   Run an Nginx container
##
## `bin/docker/run -r otvsp.ru:5000/otvsp/auth_103-rails -g rails`
##   Run a Rails container
##

autoload throw
autoload catch

declare -a args=($@)
declare -a targets=(nginx rails)
declare -a docker_options

##
## ::: Utilities :::
##

##
## any $element ($array) -> { true /* element is present in the array */ | false /* overwise */ }
##
# function any; [[ ${${@:2}[(i)$1]} -le ${#@:2} ]]

##
## none $element ($array) -> { true /* element is NOT present in the array */ | false /* otherwise */ }
##
function none; [[ ${${@:2}[(i)$1]} -gt ${#@:2} ]]

function usage {
  echo \
    'Usage:' \
    "\n" \
    "\n" \
    'COMMAND' \
    "\n" \
    "run [OPTIONS]" \
    "\n" \
    "\n" \
    'OPTIONS' \
    "\n" \
    '-r|--repository|--repository= -- specify a repository (`auth_103` is the default)' \
    "\n" \
    '-t|--tag|--tag=               -- specify a tag (`latest` is the default)' \
    "\n" \
    '-i|--interactive              -- run an interactive docker session' \
    "\n" \
    '-g|--target                   -- specify a target { nginx | rails }' \
    "\n" \
    '-h|--help                     -- display this message' \
    "\n" \
    "\n" \
    'EXAMPLES' \
    "\n" \
    '`bin/docker/run -r otvsp.ru:5000/otvsp/auth_103-nginx -g nginx`' \
    "\n" \
    "Run an Nginx container" \
    "\n" \
    "\n" \
    '`bin/docker/run -r otvsp.ru:5000/otvsp/auth_103-rails -g rails`' \
    "\n" \
    'Run a Rails container'
}

##
## ::: Entrypoint :::
##

function main TRAPEXIT {

  local -a options=($args)

  local is_help_needed=${${options[(r)-h|--help]:+true}:-false}

  [[ $is_help_needed == true ]] && usage && bye 1

  local is_interactive=${${options[(r)-i|--interactive]:+true}:-false}

  local repository=${options[options[(i)-r|--repository] + 1]:-${${options[(r)--repository=*]#--repository=}:-auth_103}}
  local tag=${options[options[(i)-t|--tag] + 1]:-${${options[(r)--tag=*]#--tag=}:-latest}}
  local target=${options[options[(i)-g|--target] + 1]:-${${options[(r)--target=*]#--target=}:-undefined}}

  {
    { none $target $targets } && throw 'ERR::NO_TARGET'
  } always {
    catch 'ERR::NO_TARGET' \
      && echo 'ERROR: No valid target was specified!' \
      && bye 101
  }

  local -A storage=(
    [source]="${HOME}/.storage/production.sqlite3"
    [destination]="/home/auth_103/app/storage/production.sqlite3"
  )

  local -A log=(
    [source]="${HOME}/.log/production.log"
    [destination]="/home/auth_103/app/log/production.log"
  )

  # local -A caddyfile=(
  #   [source]="${HOME}/.workspace/playground/rails/auth_103/caddy/Caddyfile"
  #   [destination]="/etc/caddy/Caddyfile"
  # )

  local -A nginx_http=(
    [source]="${HOME}/.nginx/default.conf"
    [destination]="/etc/nginx/http.d/default.conf"
  )

  local -A nginx_conf=(
    [source]="${HOME}/.nginx/nginx.conf"
    [destination]="/etc/nginx/nginx.conf"
  )

  # --volume ${xsock}:${xsock}
  # --publish 192.168.0.10:44244:44244
  # --publish 44244:44244

  ##
  ## ::: Rails :::
  ##
  # --publish 44244:44244
  # --rm
  local -a rails_docker_options=(
    --restart always
    --network otvsp
    --mount "type=bind,source=${storage[source]},destination=${storage[destination]}"
    --mount "type=bind,source=${log[source]},destination=${log[destination]}"
    --ip 10.0.42.151
  )

  ##
  ## ::: Caddy :::
  ##
  # local -a docker_options=(
  #   --rm
  #   --network auth_102
  #   --mount "type=bind,source=${caddyfile[source]},destination=${caddyfile[destination]}"
  #   --ip 9.0.42.141
  #   --publish 79:2019
  # )

  ##
  ## ::: Nginx :::
  ##
  ## --rm
  local -a nginx_docker_options=(
    --restart always
    --network otvsp
    --ip 10.0.42.142
    --publish 80:80
    --mount "type=bind,source=${nginx_conf[source]},destination=${nginx_conf[destination]}"
    --mount "type=bind,source=${nginx_http[source]},destination=${nginx_http[destination]}"
  )

  case $target {
    ('nginx') docker_options=($nginx_docker_options) ;;
    ('rails') docker_options=($rails_docker_options) ;;
  }

  case $is_interactive {
    (false)
      docker_options+=(--detach)
      docker run $docker_options $repository:$tag
    ;;
    (true)
      docker_options+=(--interactive --tty)
      docker run $docker_options $repository:$tag sh
    ;;
  }
}

