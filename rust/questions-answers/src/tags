!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	kind	/[tags output] prepend "kind:" to k\/ (or K\/) field output, [xref and json output] kind in long-name form/
!_TAG_FIELD_DESCRIPTION	line	/Line number of tag definition/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Rust	C,constant	/A constant/
!_TAG_KIND_DESCRIPTION!Rust	M,macro	/Macro Definition/
!_TAG_KIND_DESCRIPTION!Rust	P,method	/A method/
!_TAG_KIND_DESCRIPTION!Rust	c,implementation	/implementation/
!_TAG_KIND_DESCRIPTION!Rust	e,enumerator	/An enum variant/
!_TAG_KIND_DESCRIPTION!Rust	f,function	/Function/
!_TAG_KIND_DESCRIPTION!Rust	g,enum	/Enum/
!_TAG_KIND_DESCRIPTION!Rust	i,interface	/trait interface/
!_TAG_KIND_DESCRIPTION!Rust	m,field	/A struct field/
!_TAG_KIND_DESCRIPTION!Rust	n,module	/module/
!_TAG_KIND_DESCRIPTION!Rust	s,struct	/structural type/
!_TAG_KIND_DESCRIPTION!Rust	t,typedef	/Type Alias/
!_TAG_KIND_DESCRIPTION!Rust	v,variable	/Global variable/
!_TAG_OUTPUT_EXCMD	number	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Rust	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/user/.workspace/playground/rust/questions-answers/src/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
Err	main.rs	95;"	kind:typedef	line:95
InvalidId	main.rs	79;"	kind:struct	line:79
InvalidId	main.rs	81;"	kind:implementation	line:81
Question	main.rs	68;"	kind:struct	line:68
Question	main.rs	88;"	kind:implementation	line:88
QuestionId	main.rs	76;"	kind:struct	line:76
QuestionId	main.rs	94;"	kind:implementation	line:94
Store	main.rs	32;"	kind:struct	line:32
Store	main.rs	36;"	kind:implementation	line:36
Tags	main.rs	84;"	kind:struct	line:84
content	main.rs	71;"	kind:field	line:71
from_str	main.rs	97;"	kind:method	line:97
get_questions	main.rs	105;"	kind:function	line:105
id	main.rs	69;"	kind:field	line:69
init	main.rs	45;"	kind:method	line:45
list	main.rs	85;"	kind:field	line:85
main	main.rs	141;"	kind:function	line:141
new	main.rs	38;"	kind:method	line:38
new	main.rs	89;"	kind:method	line:89
questions	main.rs	33;"	kind:field	line:33
return_error	main.rs	120;"	kind:function	line:120
tags	main.rs	72;"	kind:field	line:72
title	main.rs	70;"	kind:field	line:70
