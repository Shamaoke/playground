
///
///                      ███            ███                          ████
///                     ▒▒▒            ▒▒▒                          ▒▒███
///      █████████████  ████ ████████  ████ █████████████    ██████  ▒███
///     ▒▒███▒▒███▒▒███▒▒███▒▒███▒▒███▒▒███▒▒███▒▒███▒▒███  ▒▒▒▒▒███ ▒███
///      ▒███ ▒███ ▒███ ▒███ ▒███ ▒███ ▒███ ▒███ ▒███ ▒███   ███████ ▒███
///      ▒███ ▒███ ▒███ ▒███ ▒███ ▒███ ▒███ ▒███ ▒███ ▒███  ███▒▒███ ▒███
///      █████▒███ ██████████████ ███████████████▒███ █████▒▒█████████████
///     ▒▒▒▒▒ ▒▒▒ ▒▒▒▒▒▒▒▒▒▒▒▒▒▒ ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ ▒▒▒ ▒▒▒▒▒  ▒▒▒▒▒▒▒▒▒▒▒▒▒
///               █████████████ ████  ██████  ████████  █████ ████
///              ███▒▒███▒▒███ ▒███  ███▒▒███▒▒███▒▒███▒▒███ ▒███
///             ▒███ ▒███ ▒███ ▒███ ▒███████  ▒███ ▒▒▒  ▒███ ▒███
///             ▒███ ▒███ ▒███ ▒███ ▒███▒▒▒   ▒███      ▒███ ▒███
///             ▒▒███████ ▒▒████████▒▒██████  █████     ▒▒███████
///              ▒▒▒▒▒███  ▒▒▒▒▒▒▒▒  ▒▒▒▒▒▒  ▒▒▒▒▒       ▒▒▒▒▒███
///                  ▒███                                ███ ▒███
///                  █████                  ███         ▒▒██████
///               ▒▒▒▒▒ ▒▒███              ▒▒▒           ▒▒▒▒▒▒
///                ████████████  ████████  ████ ████████    ███████
///               ███▒▒▒▒▒███▒  ▒▒███▒▒███▒▒███▒▒███▒▒███  ███▒▒███
///              ▒▒█████ ▒███    ▒███ ▒▒▒  ▒███ ▒███ ▒███ ▒███ ▒███
///               ▒▒▒▒███▒███ ███▒███      ▒███ ▒███ ▒███ ▒███ ▒███
///               ██████ ▒▒█████ █████     █████████ █████▒▒███████
///              ▒▒▒▒▒▒   ▒▒▒▒▒ ▒▒▒▒▒     ▒▒▒▒▒▒▒▒▒ ▒▒▒▒▒  ▒▒▒▒▒███
///                                                        ███ ▒███
///                                                       ▒▒██████
///                                                        ▒▒▒▒▒▒
///

use std::collections::HashMap;

use warp::{ http::Response, Filter };

#[tokio::main]
async fn main( ) {

  // Get /?key=value
  let route = warp::any()
    .and(warp::query::<HashMap<String, String>>())
    .map(|map: HashMap<String, String>| {
       let mut response: Vec<String> = Vec::new();
       for (key, value) in map.into_iter() {
         response.push(format!("{} = {}", key, value))
       }
       Response::builder().body(response.join(";"))
    });

  warp::serve(route).run(([127, 0, 0, 1], 1337)).await;
}

